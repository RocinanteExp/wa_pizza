[{"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\index.js":"1","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\reportWebVitals.js":"2","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\App.js":"3","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\OrderForm.js":"4","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\OrderPreview.js":"5","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\utils.js":"6","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\constants.js":"7","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\error.js":"8","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\Counter.js":"9","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\IngredientsMenu.js":"10"},{"size":529,"mtime":1609610189257,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1728,"mtime":1610143479316,"results":"14","hashOfConfig":"12"},{"size":6723,"mtime":1610218940669,"results":"15","hashOfConfig":"12"},{"size":2759,"mtime":1610143373841,"results":"16","hashOfConfig":"12"},{"size":356,"mtime":1610065220457,"results":"17","hashOfConfig":"12"},{"size":494,"mtime":1610146951332,"results":"18","hashOfConfig":"12"},{"size":1015,"mtime":1610145817319,"results":"19","hashOfConfig":"12"},{"size":1002,"mtime":1609986900167,"results":"20","hashOfConfig":"12"},{"size":4170,"mtime":1610239189367,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"e46b6y",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\index.js",[],["46","47"],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\reportWebVitals.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\App.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\OrderForm.js",["48","49"],"import \"../styles/App.css\";\nimport { useState, useEffect } from \"react\";\nimport { IngredientsMenu } from \"./IngredientsMenu\";\nimport { Counter } from \"./Counter\";\nimport utils from \"../utils/utils\";\nimport constants from \"../utils/constants\";\nimport { factoryError, errno } from \"../utils/error\";\n\nfunction orderValidator(order) {\n    console.log(order);\n    const maxQuantity = constants.PIZZA_MAX_QUANTITIES[order.size];\n    if (order.ingredients.length === 0) return { error: factoryError(errno.PIZZA_INGREDIENTS_EMPTY) };\n    if (order.quantity > maxQuantity) return { error: factoryError(errno.PIZZA_QUANTITY_EXCEEDED, [order.quantity, maxQuantity]) };\n    return {};\n}\n\nconst createButtons = (name, classes, handleClick) => {\n    const key = `key-btn-${name}`;\n\n    return (\n        <button key={key} className={`${classes.join(\" \")}`} onClick={() => handleClick(name)}>\n            {name}\n        </button>\n    );\n};\n\nconst PizzaIngredients = ({ handleOnChange, ingredients }) => {\n    const style = {\n        overflowY: \"auto\",\n        height: \"400px\",\n        scrollbarWidth: \"thin\",\n        marginBottom: \"1.5rem\",\n    };\n\n    return (\n        <div id=\"TODO\" className=\"container-flex\" style={style}>\n            <IngredientsMenu\n                name={\"Aggiungi Ingredienti!\"}\n                id={`id-table-ingredients`}\n                ingredients={ingredients}\n                handleOnChange={handleOnChange}\n            />\n        </div>\n    );\n};\n\nconst PizzaSize = ({ sizes, setPizzaSize }) => {\n    const neededButtons = sizes.slice();\n    const baseButtonClasses = [\"btn\", \"btn-dark\", \"btn-not-active\"];\n    const [activeButtonIndex, setActiveButtonIndex] = useState(1);\n\n    useEffect(() => {\n        setPizzaSize(neededButtons[activeButtonIndex]);\n    });\n\n    const handleClick = (buttonName) => {\n        const indexOf = neededButtons.indexOf(buttonName);\n        if (indexOf !== activeButtonIndex) {\n            setActiveButtonIndex(indexOf);\n            setPizzaSize(neededButtons[indexOf]);\n        }\n    };\n\n    return (\n        <div className=\"pizza-size-container margin-bottom\">\n            <h1>Dimensione pizza</h1>\n            <div className=\"container-flex\">\n                {neededButtons.map((buttonName, index) => {\n                    const classes = index === activeButtonIndex ? baseButtonClasses.slice(0, 2) : baseButtonClasses;\n                    return createButtons(buttonName, classes, handleClick);\n                })}\n            </div>\n        </div>\n    );\n};\n\nconst PizzaRequests = ({ setPizzaRequests }) => {\n    const id = \"id-container-requests\";\n    const styles = { marginBottom: \"1.5rem\" };\n\n    const handleChange = (event) => {\n        if (event.target.checked) setPizzaRequests(event.target.value);\n        else setPizzaRequests(undefined);\n    };\n\n    return (\n        <div id={id} style={styles}>\n            <h1>Richieste</h1>\n            <div className=\"container-flex\">\n                <input id=\"input-id-senza-pomodoro\" value=\"Pomodoro\" type=\"checkbox\" onChange={handleChange} />\n                <label\n                    className=\"container-flex flex-cross-center\"\n                    htmlFor=\"input-id-senza-pomodoro\"\n                    style={{ width: \"100%\" }}\n                >\n                    Senza pomodoro\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst PizzaQuantity = ({ setPizzaQuantity }) => {\n    const id = \"id-container-quantity\";\n    const styles = { marginBottom: \"1.5rem\" };\n    return (\n        <div id={id} style={styles}>\n            <h1>Quantit√†</h1>\n            <Counter callback={(quantity) => setPizzaQuantity(quantity)} />\n        </div>\n    );\n};\n\n// the ingredient's name must be unique\nconst OrderForm = ({ templateForm, handleOrderSubmit }) => {\n    const { sizes, ingredients, requests, quantity } = templateForm;\n    const [pizzaSize, setPizzaSize] = useState(\"\");\n    const [pizzaIngredients, setPizzaIngredients] = useState([]);\n    const [pizzaRequests, setPizzaRequests] = useState(undefined);\n    const [pizzaQuantity, setPizzaQuantity] = useState(-1);\n\n    const handleOnChangeIngredients = (ingredient, status) => {\n        let newPizzaIngredients = [];\n        // add ingredient to pizzaIngredients\n        if (status) {\n            newPizzaIngredients = pizzaIngredients.slice();\n            newPizzaIngredients.push(ingredient);\n        } else {\n            // delete ingredient to pizzaIngredients\n            const indexIngredient = pizzaIngredients.indexOf(ingredient);\n            newPizzaIngredients = utils.removeItemFromArray(pizzaIngredients, indexIngredient);\n        }\n        setPizzaIngredients(newPizzaIngredients);\n        console.log(newPizzaIngredients);\n    };\n\n    const onButtonSubmit = () => {\n        const order = {\n            size: pizzaSize,\n            quantity: pizzaQuantity,\n            requests: pizzaRequests,\n            ingredients: pizzaIngredients,\n        };\n        const { error } = orderValidator(order);\n        console.log(error);\n        if(!error) handleOrderSubmit(order);\n    };\n\n    return (\n        <div id=\"id-order-form\" className=\"container-small\">\n            <PizzaSize sizes={sizes} {...{ setPizzaSize }} />\n            <PizzaIngredients ingredients={ingredients} handleOnChange={handleOnChangeIngredients} />\n            <PizzaRequests {...{ setPizzaRequests }} />\n            <PizzaQuantity {...{ setPizzaQuantity }} />\n            <button id=\"id-btn-aggiungi\" onClick={onButtonSubmit} className=\"btn btn-submit\">\n                Aggiungi\n            </button>\n        </div>\n    );\n};\n\n\nexport { OrderForm };\n// OLD CODE\n//const [selectedIngredients, setSelectedIngredients] = useState([]);\n//const [availableIngredients, setAvailableIngredients] = useState(BASE_INGREDIENTS);\n\n//const tableIds = { taken: \"key-table-taken\", notTaken: \"key-table-not-taken\" };\n\n//useEffect(() => {\n//    setPizzaIngredients(selectedIngredients);\n//}, [selectedIngredients]);\n\n//const handleClick = (ingredientKey, from) => {\n//    const [takeFrom, takeFromFunc] =\n//        from === tableIds.taken\n//            ? [selectedIngredients, setSelectedIngredients]\n//            : [availableIngredients, setAvailableIngredients];\n\n//    const [addTo, addToFunc] =\n//        from === tableIds.taken\n//            ? [availableIngredients, setAvailableIngredients]\n//            : [selectedIngredients, setSelectedIngredients];\n\n//    const ingredientName = ingredientKey.split(\"key-\")[0];\n\n//    const index = takeFrom.indexOf(ingredientName);\n//    const newTakeFrom = utils.removeItemFromArray(takeFrom, index);\n\n//    const newAddTo = utils.addItemToArray(addTo, ingredientName);\n\n//    takeFromFunc(newTakeFrom);\n//    addToFunc(newAddTo);\n//};\n","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\OrderPreview.js",["50"],"import constants from \"../utils/constants\";\n\nlet keyCounter = 0;\n\nconst createQuantitySelect = (maxQuantity, defaultQuantity, callback) => {\n    const optionTags = [];\n    optionTags.push(<option value=\"Rimuovi\">Rimuovi</option>);\n    for (let i = 1; i <= maxQuantity; i++) {\n        optionTags.push(\n            <option value={i} selected={defaultQuantity === i ? \"selected\" : \"\"}>\n                {i}\n            </option>\n        );\n    }\n\n    return (\n        <select\n            onChange={(event) => {\n                if (event.target.value === \"Rimuovi\") callback();\n            }}\n            class=\"select\"\n        >\n            {optionTags}\n        </select>\n    );\n};\n\nconst createOrderBullet = (pizzaOrder, callback) => {\n    const key = `key-li-${keyCounter++}`;\n    const { size, ingredients = [], requests, quantity: defSelection } = pizzaOrder;\n\n    return (\n        <li key={key} className=\"container-flex flex-cross-center\">\n            {createQuantitySelect(constants.PIZZA_MAX_QUANTITIES[size], defSelection, callback)}\n            <div className=\"container-flex flex-column\">\n                <span>{`Pizza ${size}`}</span>\n                <span>{`Ingredienti: ${ingredients.join(\", \")}`}</span>\n                <span>{`Richieste: ${requests ? requests : \"none\"}`}</span>\n            </div>\n        </li>\n    );\n};\n\nconst OrdersList = ({ orders, handleOrderRemove}) => {\n    return (\n        <div>\n            <ul>\n                {orders.map((order, index) =>\n                    createOrderBullet(order, () => {\n                        handleOrderRemove(index);\n                    })\n                )}\n            </ul>\n        </div>\n    );\n};\n\nconst OrderPreview = ({ orders, handleOrderRemove }) => {\n    //const [orderList, setOrderList] = useState([]);\n    console.log(\"sono preview\", orders);\n\n    //useEffect(() => {\n    //    console.log(\"Use effect\", debugCounter++, \"orders\", orders);\n    //    if (check.isObjEmpty(orders)) return;\n\n    //    // add the new order to the list\n    //    const newOrderList = orderList.slice();\n    //    newOrderList.push(orders);\n    //    setOrderList(newOrderList);\n    //}, [orders]);\n\n    //const removeOrderFromList = (indexOrder) => {\n    //    console.log(indexOrder);\n    //    const newOrderList = utility.removeItemFromArray(orderList, indexOrder);\n    //    console.log(newOrderList);\n    //    setOrderList(newOrderList);\n    //};\n\n    const style = {\n        margin: \"0.35rem 0.9rem\",\n    };\n\n    return (\n        <div id=\"id-order-preview\">\n            <h1>Il tuo ordine</h1>\n            <OrdersList orders={orders} handleOrderRemove={handleOrderRemove} />\n            <button className=\"btn btn-submit\">Ordina Adesso</button>\n        </div>\n    );\n};\n\nexport { OrderPreview };\n","C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\utils.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\constants.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\utils\\error.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\Counter.js",[],"C:\\Users\\franc\\workspaceVS\\testing\\exam\\pizzaWebsite\\src\\components\\IngredientsMenu.js",["51"],"/**\n * create ingredient panel\n * @param {String} name\n * @param {Array} of String ingredients\n * @param {Function} handleOnChange\n * @param {Integer} id\n * @returns {Component} IngredientsMenu\n **/\n\nconst IngredientsMenu = ({ name, ingredients, handleOnChange, id }) => {\n    const ingredientsGroupedByInitials = groupByInitials(ingredients);\n\n    return (\n        <div id={id}>\n            <h1>{name}</h1>\n            {ingredientsGroupedByInitials.map((group) => createIngredientsGroup(group, handleOnChange))}\n        </div>\n    );\n};\n\nconst createPizzaIcons = (ingredientName) => {\n    const style = {\n        width: \"1.25rem\",\n        height: \"1.25rem\",\n        borderRadius: \"50%\",\n        backgroundColor: \"green\",\n    };\n\n    const id = `id-container-icons-${ingredientName}`\n    const idRadioLeft = `id-radio-left-icons-${ingredientName}`\n    const idRadioCenter = `id-radio-center-icons-${ingredientName}`\n    const idRadioRight = `id-radio-right-icons-${ingredientName}`\n\n    return (\n        <div id={id} className=\"container-flex flex-cross-center\">\n            <div className=\"container-flex pos-relative\">\n                <input type=\"radio\" id={idRadioLeft} name=\"pizza-side\" value=\"left\"></input>\n                <label for={idRadioLeft} className=\"left-half-circle bg-black toggle\"></label>\n                <label for={idRadioLeft} className=\"right-half-circle bg-white\"></label>\n            </div>\n\n            <div className=\"container-flex pos-relative\">\n                <input type=\"radio\" id={idRadioCenter} name=\"pizza-side\" value=\"both\"></input>\n                <label for={idRadioCenter} className=\"left-half-circle bg-black toggle\"></label>\n                <label for={idRadioCenter} className=\"right-half-circle bg-black toggle\"></label>\n\n            </div>\n\n            <div className=\"container-flex pos-relative\">\n                <input type=\"radio\" id={idRadioRight} name=\"pizza-side\" value=\"right\"></input>\n                <label for={idRadioRight} className=\"left-half-circle bg-white\"></label>\n                <label for={idRadioRight} className=\"right-half-circle bg-black toggle\"></label>\n            </div>\n        </div>\n    );\n};\n\nconst createIngredientRow = (data, handleOnChange) => {\n    const id = `row-id-${data}`;\n    const inputId = `input-id-${data}`;\n    const key = `key-${data}`;\n    const displayName = `${data.slice(0, 1).toUpperCase() + data.slice(1, data.length)}`;\n\n    const onChange = (event) => {\n        handleOnChange(event.target.value, event.target.checked);\n    };\n\n    return (\n        <div id={id} key={key} className=\"container-flex flex-cross-center flex-main-sb\">\n            <input id={inputId} value={displayName} type=\"checkbox\" onChange={onChange}></input>\n            <label className=\"container-flex flex-cross-center\" htmlFor={inputId}>\n                {displayName}\n            </label>\n            {createPizzaIcons(data)}\n        </div>\n    );\n};\n\nfunction createIngredientsGroup(ingredients, ...handlers) {\n    const initial = ingredients[0].slice(0, 1).toUpperCase();\n    const key = `group-key-initial-${initial}`;\n    const id = `group-id-initial-${initial}`;\n\n    return (\n        <div key={key} id={id}>\n            <div className=\"font size-m weight-bold\">{initial}</div>\n            {ingredients.map((ingredient) => createIngredientRow(ingredient, handlers[0]))}\n        </div>\n    );\n}\n\n/**\n * group the ingredients by their initial\n * @param {Array} of String ingredients\n * @param {Array} of Function handlers\n * @returns {Array} of Array\n **/\nfunction groupByInitials(ingredients) {\n    const ret = [];\n\n    // transform every word to lowercase\n    const lowerCasedIngredients = ingredients.map((i) => i.toLowerCase());\n    // sort the array\n    lowerCasedIngredients.sort();\n\n    let last = null;\n    let group = [];\n    for (const ingredient of lowerCasedIngredients) {\n        const initial = ingredient.slice(0, 1);\n\n        // a different letter means a new group\n        if (initial !== last) {\n            group = [];\n            last = initial;\n            ret.push(group);\n        }\n\n        group.push(ingredient);\n    }\n\n    return ret;\n}\n\nexport { IngredientsMenu };\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":116,"column":33,"nodeType":"58","messageId":"59","endLine":116,"endColumn":41},{"ruleId":"56","severity":1,"message":"60","line":116,"column":43,"nodeType":"58","messageId":"59","endLine":116,"endColumn":51},{"ruleId":"56","severity":1,"message":"61","line":79,"column":11,"nodeType":"58","messageId":"59","endLine":79,"endColumn":16},{"ruleId":"56","severity":1,"message":"61","line":22,"column":11,"nodeType":"58","messageId":"59","endLine":22,"endColumn":16},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'requests' is assigned a value but never used.","Identifier","unusedVar","'quantity' is assigned a value but never used.","'style' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]